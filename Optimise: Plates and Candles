class Solution {
public:
    vector<int> platesBetweenCandles(string s, vector<vector<int>>& queries) {
        vector<int> prefixSum;
        prefixSum[0] = s[0]=='|'?1:0;
        for(int i=1;i<=s.length()-1;i++){
            prefixSum[i] = prefixSum[i-1];
            if(s[0] == '|')
                prefixSum[i] = prefixSum[i-1]+1;
        }
        vector<int> answer;
        int index = 0;
        for(int i =0;i<=queries.size()-1;i++){
            int arr[2]={queries[i][0],queries[i][0]};
            int left =arr[0];int right = arr[1];
            int leftCandle =left;int rightCandle = right;
            if(s[left] == '|'){
                leftCandle = left;
            }
            else{
                leftCandle = BinarySearch(prefixSum,left,right,prefixSum[left]+1);
                if(leftCandle == -1){
                    answer[index++] = 0;continue;
                }
            }
            if(s[right] == '|'){
                rightCandle = right;
            }
            else{
                rightCandle = BinarySearch(prefixSum,left,right,prefixSum[right]);
                if(rightCandle == -1){
                    answer[index++] = 0;continue;
                }
            }
        }
        return answer;
    }
    int BinarySearch(vector<int> query,int left, int right,int target){
        int l = 0;
        int r = query.size()-1;
        int ans =-1;
        int mid =-1;
        while(l<= r){
            mid = (l +r)/2;
            if(query[mid]<target){
                l= mid + 1;
            }
            else if(query[mid]> target){
                r = mid -1;
            }
            else{
                ans = mid;
                r = mid -1;
            }
        }
        return ans;
    }
};
