class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        bool zeroExist =  false;
        vector<int> prefixProducts;
        int prefix = 1;
        int cnt = 0;
        for(int i =0;i< nums.size();i++){
            if(nums[i] == 0){
                zeroExist = true;
                cnt++;
            }
        }
        if(nums.size()== 2 && nums[0] == 0){
            prefixProducts.push_back(nums[1]);prefixProducts.push_back(0);
            return prefixProducts;
        }
        if(nums.size()== 2 && nums[1] == 0 ){
            prefixProducts.push_back(0);prefixProducts.push_back(nums[0]);
            return prefixProducts;
        }
        if(cnt == nums.size())
            return nums;
        if(cnt > 1){
            for( int i = 0;i< nums.size();i++){
                prefixProducts.push_back(0);
            }
            return prefixProducts;
        }
        else{
            for(int i =0;i< nums.size();i++){
                if(nums[i] !=0){
                    prefix = prefix * nums[i];
                    cout<<prefix<<"\n";
                }
            }
            sort(prefixProducts.begin(),prefixProducts.end(),greater<int>());
            for(int i =0;i < nums.size();i++){
                if(zeroExist == true && nums[i] != 0)
                    prefixProducts.push_back(0);
                else if ( nums[i] == 0 )
                    prefixProducts.push_back(prefix);
                else
                    prefixProducts.push_back(prefix/nums[i]);
            }
        }
        return prefixProducts;
    }
};
